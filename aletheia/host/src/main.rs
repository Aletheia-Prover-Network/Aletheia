// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{ALETHEIA_GUEST_ELF, ALETHEIA_GUEST_ID};
use risc0_zkvm::{ExecutorEnv, default_prover};
use std::fs;

use serde::Serialize;
use std::{fs::File, io::Write};
#[derive(Serialize)]
pub struct Proof {
    proof: String,
    image_id: String,
    pub_inputs: String,
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let block_state_data_input = fs::read_to_string("../data_extractor/block_proof.json").unwrap();
    
    // println!("This is the read file state {}", block_state);

    let env = ExecutorEnv::builder()
        .write(&block_state_data_input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, ALETHEIA_GUEST_ELF).unwrap();

    println!("{:?}", prove_info);

    // extract the receipt.
    let receipt = prove_info.receipt;

    let mut bin_receipt = Vec::new();
    ciborium::into_writer(&receipt, &mut bin_receipt).unwrap();
    let image_id_hex = hex::encode(
        ALETHEIA_GUEST_ID
            .into_iter()
            .flat_map(|v| v.to_le_bytes().into_iter())
            .collect::<Vec<_>>(),
    );
    let receipt_journal_bytes_array = &receipt.journal.bytes.as_slice();
    let proof = Proof {
        proof: "0x".to_string() + &hex::encode(&bin_receipt),
        image_id: "0x".to_string() + &image_id_hex,
        pub_inputs: "0x".to_string() + &hex::encode(&receipt_journal_bytes_array),
    };

    let json_string = serde_json::to_string_pretty(&proof).unwrap();
    let mut file = File::create("proof_output.json").unwrap();
    file.write_all(json_string.as_bytes()).unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(ALETHEIA_GUEST_ID).unwrap();
}
